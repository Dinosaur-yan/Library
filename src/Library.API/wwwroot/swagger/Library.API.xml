<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library.API</name>
    </assembly>
    <members>
        <member name="M:Library.API.Configurations.AuthenticationConfig.AddAuthenticationConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            认证（Authentication）：验证用户身份的过程
            1. Basic认证：将用户名、密码以冒号分割，并对组合后的字符串进行Base64编码
            2. Digest认证（摘要认证）：客户端根据服务器返回的nonce值、用户的认证信息、请求的URL、使用的http方法以MD5散列值算法计算得到
            3. Bearer认证：主要用在OAuth2.0认证，还广泛应用在常见的基于token的认证中
            
            
            授权（Authorization）：验证一个用户是否有权限做某事的过程
            基础角色的授权、基于Claim（声明）的授权、基于策略的授权
            1. 角色
                如果要同时允许多个角色访问，则可以使用逗号分隔角色名，这样只要具有其中某一个角色的用户即可访问该接口（角色为Administrator或者Manager的都可以访问）
                [Authorize(Roles = "Administrator,Manager")]
                基于策略的角色检查
                [Authorize(Policy  = "ElevatedRights")]
                public class DemoController : Controller
                {
                     可以通过在操作级别应用其他角色授权属性来进一步限制访问权限，只有Administrator可以访问
                     [Authorize(Roles = "Administrator")]
                     public ActionResult ShutDown()
                     {
                     }
                }
                如果某个接口要求用户同时具有多个角色才能够访问，则可以为其添加多个带有Roles属性的[Authorize]特性，如下（角色为Administrator且是Manager可以进行访问）
                [Authorize(Roles = "Administrator")]
                [Authorize(Roles = "Manager")]
                public class DemoController : Controller
                {
                }
            2. 声明（claim）
            
            
            3. 策略
            
        </member>
        <member name="M:Library.API.Configurations.CorsConfig.AddCorsConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            CORS，全称Cross-Origin Resource Sharing（跨域资源共享），是一种允许当前域的资源能被其他域访问的机制。
            https://(协议) 127.0.0.1(主机) :5001(端口) /api/values，3项中有1项不同，那么该资源就会被认为来自不同的域，则浏览器不允许访问
            
            对于跨域资源访问，CORS会将它们分为两种类型：简单请求和非简单请求。
            简单请求：
                 1. 请求方法为GET、HEAD、POST三者之一
                 2. 如果请求方法为POST，则Content-Type消息头的值只允许为这3项：application/x- www-form-urlencoded、multipart/form-data、text/plain
                 3. 不包含自定义消息头
            
            非简单请求：不满足其中任何一个条件，如请求方法为PUT和DELETE等，则该请求为非简单请求
                        非简单请求要比简单请求略为复杂一些。所谓非简单请求，是指在向服务器发送实际请求之前，先发送一个OPTIONS方法的请求，以确认发送正式请求是否安全
            
        </member>
        <member name="M:Library.API.Configurations.MemoryCacheConfig.AddMemoryCacheConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            内存缓存事实上是一个键值对字典
        </member>
        <member name="M:Library.API.Configurations.ResponseCacheConfig.AddCacheProfiles(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Mvc.CacheProfile})">
            缓存是一种通过存储资源的备份，在请求时返回资源备份的技术
            1. http缓存（是否使用缓存Cache-Control、缓存有效时间Expires，只有当请求是GET或HEAD并且返回结果为200 OK状态码时，响应才支持缓存）
             常见的Cache-Control指令：
             public: 表明响应可以被任何对象（如发送请求的客户端和代理服务器）缓存
             private: 表明响应只能为单个用户缓存，不能作为共享缓存（及代理服务器不能缓存它）
             max-age: 设置缓存的最大存储时间，超过这个时间缓存被认为过期，单位为秒；当与Expires同时出现时，优先使用max-age
             no-cache: 必须到原始服务器验证后才能使用的缓存
                 验证缓存自愿的方式有两种
                 (1) 通过响应消息头中的Last-Modified（资源最后更新的时间），在验证时，需要在请求头中添加If-Modified-Since消息头，这个值是客户端最后一次收到该响应资源Last-Modified的值
                 (2) 通过使用实体标签ETag（Entity Tag），在验证时，需要在请求头中添加If-None-Match，这个值是客户端最后一次从服务器获取的ETag值；
                     当ETag一致时返回304Not Modified状态码，不一致时处理请求，
             no-store: 缓存不应存储有关客户端请求或服务器的任何内容 
        </member>
        <member name="T:Library.API.Controllers.AuthenticateController">
            <summary>
            认证
            </summary>
        </member>
        <member name="M:Library.API.Controllers.AuthenticateController.GenerateToken(Library.API.Models.LoginUser)">
            <summary>
            demo演示
            </summary>
            <param name="loginUser"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.AuthenticateController.GenerateTokenAsync(Library.API.Models.LoginUser)">
            <summary>
            Identity校验
            </summary>
            <param name="loginUser"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.AuthenticateController.GetJwtSecurityToken(System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            获取SecurityToken
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.AuthenticateController.AddUserAsync(Library.API.Models.RegisterUser)">
            <summary>
            注册用户
            </summary>
            <param name="registerUser"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.AuthenticateController.AddUserToRoleAsync(Library.API.Entities.User,System.String)">
            <summary>
            添加角色
            </summary>
            <param name="user"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="T:Library.API.Controllers.AuthorController">
            <summary>
            author
            </summary>
        </member>
        <member name="M:Library.API.Controllers.AuthorController.GetAuthorsAsync(Library.API.Helpers.AuthorResourceParameters)">
            <summary>
            获取所有author资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.AuthorController.GetAuthorAsync(System.Guid)">
            <summary>
            获取author资源
            </summary>
            <param name="authorId"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.AuthorController.CreateAuthorAsync(Library.API.Models.AuthorForCreationDto)">
            <summary>
            创建author资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.AuthorController.DeleteAuthorAsync(System.Guid)">
            <summary>
            删除author资源
            </summary>
            <param name="authorId"></param>
            <returns></returns>
        </member>
        <member name="T:Library.API.Controllers.BookController">
            <summary>
            book
            </summary>
        </member>
        <member name="M:Library.API.Controllers.BookController.GetBooksAsync(System.Guid)">
            <summary>
            获取所有book资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.BookController.GetBookAsync(System.Guid,System.Guid)">
            <summary>
            获取book资源
            </summary>
            <param name="authorId"></param>
            <param name="bookId"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.BookController.CreateBookAsync(System.Guid,Library.API.Models.BookForCreationDto)">
            <summary>
            创建book资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.BookController.DeleteBookAsync(System.Guid,System.Guid)">
            <summary>
            删除book资源
            </summary>
            <param name="authorId"></param>
            <param name="bookId"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.BookController.UpdateBookAsync(System.Guid,System.Guid,Library.API.Models.BookForUpdateDto)">
            <summary>
            全量更新book资源
            </summary>
            <param name="authorId"></param>
            <param name="bookId"></param>
            <param name="updateBook"></param>
            <returns></returns>
        </member>
        <member name="M:Library.API.Controllers.BookController.PartiallyUpdateBookAsync(System.Guid,System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{Library.API.Models.BookForUpdateDto})">
            <summary>
            局部更新book资源
            </summary>
            <param name="authorId"></param>
            <param name="bookId"></param>
            <param name="patchDocument"></param>
            <returns></returns>
        </member>
        <member name="T:Library.API.Controllers.PersonController">
            <summary>
            Action级别版本控制
            </summary>
        </member>
        <member name="T:Library.API.Controllers.RootController">
            HATEOAS >> Hypermedia As Engine Of Application State(超媒体作为应用程序状态引擎)
        </member>
        <member name="T:Library.API.Controllers.V1.ValuesController">
            <summary>
            控制器级别版本控制
            </summary>
        </member>
        <member name="T:Library.API.Controllers.V2.ValuesController">
            <summary>
            控制器级别版本控制
            </summary>
        </member>
        <member name="P:Library.API.Entities.Author.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Library.API.Entities.Author.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Library.API.Entities.Author.BirthDate">
            <summary>
            出生日期
            </summary>
        </member>
        <member name="P:Library.API.Entities.Author.BirthPlace">
            <summary>
            出生地址
            </summary>
        </member>
        <member name="P:Library.API.Entities.Author.Email">
            <summary>
            电子邮箱
            </summary>
        </member>
        <member name="P:Library.API.Entities.Book.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Library.API.Entities.Book.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Library.API.Entities.Book.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Library.API.Entities.Book.Pages">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Library.API.Entities.Book.AuthorId">
            <summary>
            作者Id
            </summary>
        </member>
        <member name="M:Library.API.Filters.CheckIfMatchHeaderFilterAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            并发：当多个客户端同时请求一个资源
             当多个客户端同时请求一个资源，并且都对该资源进行数据修改时，由于客户端向服务器提交的时间不一致，结果导致先提交的数据被后提交的数据覆盖（后修改者有效）
            
            并发处理策略：
             1>. 保守式并发控制（悲观并发控制）：当客户端修改资源时，有服务器将其锁定，这样其他用户就不能进行修改
             2>. 开放式并发控制（乐观并发控制）：通过表示资源的当前状态的散列值实现的。当客户修改资源时，将其散列值一并提交给服务器（使用If-Match消息头），服务器检查该值是否有效
                 有效：该资源在此期间未被修改，服务器允许进行修改
                 失效：该资源已经被修改过，服务器将拒绝客户端的修改请求（返回412PreconditionFailed状态码，表示先决条件失败）
                 
            If-None-Match：验证成功,返回304NotModified状态码(未发生变化)
            If-Match：验证成功，则继续执行操作，否则返回412PreconditionFailed状态码
        </member>
        <member name="T:Library.API.Filters.RegisteredMoreThan3DaysRequirement">
            <summary>
            注册日期超过3天后才有权限访问
            </summary>
        </member>
        <member name="M:Library.API.Filters.RequestRateLimitingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            限制每分钟内使用同一方法对同一个资源仅能发起10次请求
            可使用第三方库AspNetCoreRateLimit
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Library.API.Helpers.ApiError.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Library.API.Helpers.ApiError.Detail">
            <summary>
            详细信息
            </summary>
        </member>
        <member name="M:Library.API.Helpers.PagedList`1.CreateAsync(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            创建分页数据
            </summary>
            <param name="source"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Library.API.Helpers.PropertyMapping">
            <summary>
            属性映射
            </summary>
        </member>
        <member name="P:Library.API.Helpers.PropertyMapping.TargetProperty">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="P:Library.API.Helpers.PropertyMapping.IsRevert">
            <summary>
            是否顺序相反
            </summary>
        </member>
        <member name="T:Library.API.Models.AuthorDto">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorDto.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorDto.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorDto.Age">
            <summary>
            年龄
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorDto.Email">
            <summary>
            电子邮箱
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorDto.BirthPlace">
            <summary>
            出生地址
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorForCreationDto.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorForCreationDto.Age">
            <summary>
            年龄
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorForCreationDto.Email">
            <summary>
            电子邮箱
            </summary>
        </member>
        <member name="P:Library.API.Models.AuthorForCreationDto.BirthPlace">
            <summary>
            出生地址
            </summary>
        </member>
        <member name="T:Library.API.Models.BookDto">
            <summary>
            书
            </summary>
        </member>
        <member name="P:Library.API.Models.BookDto.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Library.API.Models.BookDto.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Library.API.Models.BookDto.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Library.API.Models.BookDto.Pages">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Library.API.Models.BookDto.AuthorId">
            <summary>
            作者Id
            </summary>
        </member>
        <member name="P:Library.API.Models.BookForCreationDto.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Library.API.Models.BookForCreationDto.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Library.API.Models.BookForCreationDto.Pages">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Library.API.Models.BookForUpdateDto.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Library.API.Models.BookForUpdateDto.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Library.API.Models.BookForUpdateDto.Pages">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Library.API.Models.Link.Href">
            <summary>
            用户可以检索资源或改变应用状态的URL
            </summary>
        </member>
        <member name="P:Library.API.Models.Link.Method">
            <summary>
            请求该URL要是用的http方法
            </summary>
        </member>
        <member name="P:Library.API.Models.Link.Relation">
            <summary>
            描述href指向的资源和现有资源的关系
            </summary>
        </member>
        <member name="P:Library.API.Models.Resource.Links">
            <summary>
            所有资源的基类
            </summary>
        </member>
    </members>
</doc>
